1. int和Integer  
    int是基本数据类型，Integer是int的封装类，是引用类型。
    
    | |默认值|  
    |:---:| :---:|
    |int|0|  
    |Integer|null|

2. 基本数据类型和引用类型  
    基本数据类型在声明时系统会自动给他分配空间，  
    引用类型声明时只分配了引用空间，必须通过实例化开辟数据空间后才能赋值。
    
3. instanceof 关键字  
    一个双目运算符，用来测试一个对象是否为一个类的实例，  
    用法：  
    boolean result = obj instanceof Class;  
    其中obj为一个对象，Class表示一个类或者一个接口，当obj为Class的对象或者子类，或者是接口的实现类，都返回true，  
    如果obj为null就返回false。

4. 自动装箱与拆箱 ->class IntegerAndInt

    | |描述|调用方法|
    |:---:|:---:|:---:|
    |装箱|int->Integer|Integer.valueOf(int)|
    |拆箱|Integer->int|Integer.intValue()|
    
5. equals与==
    + ==比较的是变量（栈）内存中存放的对象的（堆）内存地址，用来判断两个对象的地址是否相同，
    即是否是指相同的一个对象，比较的是真正意义上的指针操作。
    + equals用来比较两个对象的内容是否相等
    
6. HashCode的作用  
    Java的集合有两类，list和set，list有序可重复，set无序不重复。
    哈希算法：将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，
    根据一个对象的哈希码就可以确定该对象应该存储的区域。
    hashCode方法理解：他返回的就是根据对象的内存地址换算出的一个指，这样一来，当集合要添加新的元素时，
    先调用这个元素的hashCode方法，就一下能定位到他应该放置的物理位置上，如果位置上没有元素，就可以直接存储在这个位置上，
    不用进行任何比较，如果有元素，就调用equals与新元素比较，相同就不存，不同就散列到他地址。

7. ArrayList和LinkedList  
    ArrayList底层是数组，查询快
    LinkedList底层是双链表，增删快
    
8. 线程、进程、程序  
    **程序**是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，程序是静态的代码。  
    
    **进程**是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。各进程是独立的。  
    系统运行一个程序即是一个进程从创建，运行到消亡的过程。一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令的执行着，
    同时，每个进程还占用着某些系统资源，如CPU时间，内存空间，文件，输入输出设备的使用权等。当程序在执行时，会被操作系统载入内存中。  
    
    **线程**与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程
    共享同一块内存空间，和一组系统资源，所以系统在产生一个线程或是各个线程之间切换工作时，负担要比进程小的多，也正因为如此，线程
    被称为轻量级进程。
    
9. 线程的基本状态  
    Java线程在运行的生命周期中的指定时刻只可能处于下面6中状态的其中之一  
    
     状态名称|说明
     :---|:---
     NEW|初始状态，线程被构建，但是还没有调用start()方法
     RUNNABLE|运行状态，Java线程将操作系统中的就绪和运行两种状态笼统的称作运行中
     BLOCKED|阻塞状态，表示线程阻塞于锁
     WAITING|等待状态，表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）
     TIME_WAITING|超时等待状态，该状态不同于WAITING，它是可以在指定的时间自行返回的
     TERMINATED|终止状态，表示当前线程已经执行完毕
     
10. JNI: Java Native Interface  
    某些情况下，Java可能会不满足应用程序的需求，或是不能更好的满足，比如:
    1. 标准的Java类库不支持应用程序平台所需的平台相关功能。
    2. 我们已经用另一种语言编写了一个类库，如何用Java代码调用？
    3. 某些运行次数特别多的方法代码，为了加快性能，我们需要用更接近硬件的语言（汇编）编写。
    JNI就是为了用Java代码调用不同语言编写的代码而生的。  
    JNI缺点：  
        + 程序不再跨平台，要想跨平台必须在不同的系统环境下重新编译本地语言部分。  
        + 程序不再是绝对安全，本地代码的不当使用，可能导致整个程序崩溃。  
        通用规则： 让本地方法集中在少数几个类，以便降低Java和C的耦合性。

11. native关键字  
    native用来修饰方法，一个native Method就是一个Java调用非Java代码的接口。  
    native语法：  
    + 修饰方法的位置必须在返回类型之前，和其余的方法控制符前后关系不受限制。
    + 不能用abstract修饰，也没有方法体，也没有左右大括号。
    + 返回值可以是任意类型。
        
